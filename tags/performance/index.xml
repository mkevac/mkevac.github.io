<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>performance on Marko Kevac Home</title>
    <link>http://marko.kevac.org/tags/performance/</link>
    <description>Recent content in performance on Marko Kevac Home</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Thu, 19 Jun 2014 12:33:00 +0300</lastBuildDate><atom:link href="http://marko.kevac.org/tags/performance/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Perf and Stack Traces</title>
      <link>http://marko.kevac.org/posts/perf-and-stack-traces/</link>
      <pubDate>Thu, 19 Jun 2014 12:33:00 +0300</pubDate>
      
      <guid>http://marko.kevac.org/posts/perf-and-stack-traces/</guid>
      <description>I was wondering why perf record -g don&amp;rsquo;t show proper stack traces for my programs in production environment. First I thought that kernel was too old, but after performing few experiments I have found out that it wasn&amp;rsquo;t the case. Problem was that when you compile with optimizations (-O3), gcc automatically omits frame pointers. And it is not easy to unwind stack traces without frame pointers. But gcc can do it somehow.</description>
    </item>
    
    <item>
      <title>Who&#39;s Calling</title>
      <link>http://marko.kevac.org/posts/whos-calling/</link>
      <pubDate>Fri, 02 May 2014 11:15:00 +0300</pubDate>
      
      <guid>http://marko.kevac.org/posts/whos-calling/</guid>
      <description>Sometimes your program uses a lot of system time. Let&amp;rsquo;s say 90%. You fire up your favorite profiling tool and it tells you which system call it is. If you are experiences and maybe lucky, you can say straight away which part of your program is to blame. But it&amp;rsquo;s not always so obvious.
GDB comes to the rescue. You can use catch syscall &amp;lt;syscall&amp;gt; and it will break when particular syscall is called.</description>
    </item>
    
    <item>
      <title>Perf on Latest Linux Kernel</title>
      <link>http://marko.kevac.org/posts/perf-on-latest-linux-kernel/</link>
      <pubDate>Fri, 02 May 2014 10:05:00 +0300</pubDate>
      
      <guid>http://marko.kevac.org/posts/perf-on-latest-linux-kernel/</guid>
      <description>I have being playing today with perf on latest available kernel in Fedora (3.13). These are just some observations and thoughts.
perf trace This tool is similar to strace, but almost without overhead. Contrary to strace, you can use perf trace to watch syscalls system wide or system calls generated by processes owned by certain user.
perf top Function names are shown correctly and -g parameter is now available. It means that you can get call traces in a real time (without perf record).</description>
    </item>
    
    <item>
      <title>Searching for a position of set bits in a variable</title>
      <link>http://marko.kevac.org/posts/searching-for-a-position/</link>
      <pubDate>Sat, 30 Jun 2012 10:07:00 +0300</pubDate>
      
      <guid>http://marko.kevac.org/posts/searching-for-a-position/</guid>
      <description>In a deamon that I have created in Badoo I need to search for a positions of a bits in a 32 bit variable. The simplest solution is to look at each bit, but there is a faster solution using GCC built in function __builtin_ctzl:
 Returns the number of trailing 0-bits in x, starting at the least significant bit position. If x is 0, the result is undefined.
 So I wrote test to compare speed of these two approaches:</description>
    </item>
    
  </channel>
</rss>
